{"version":3,"file":"settlesSerial.js","sourceRoot":"","sources":["../../src/serial/settlesSerial.ts"],"names":[],"mappings":"AAEA,OAAO,YAAY,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAC9C,MAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5B,MAAM,aAAa;IAEjB,YAAY,IAAmB;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,MAAM;QACJ,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1B,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YACnE,MAAM,OAAO,GAAkB,CAAC,MAAM,CAAC,CAAC;YACxC,KAAK,IAAI,CAAC,IAAI,OAAO,EAAE;gBACrB,MAAM,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,8BAA8B;gBACxE,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC1D,MAAM,QAAQ,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC9D,MAAM,SAAS,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;gBACtD,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;aACpD;YACD,OAAO,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAC/B;QACD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,CAAC;CACF;AAED,eAAe,aAAa,CAAC","sourcesContent":["import { Settle } from \"../types\";\nimport SerialTrait from \"./serial_trait\";\nimport FactorSerial from \"./factor\";\nimport { fromAddressBytes } from \"../address\";\nconst BN = require(\"bn.js\");\nclass SettlesSerial implements SerialTrait {\n  data: Array<Settle>;\n  constructor(data: Array<Settle>) {\n    this.data = data;\n  }\n\n  serial(): Buffer {\n    const settles = this.data;\n    if (settles.length > 0) {\n      const lenBuf = new BN(settles.length).toArrayLike(Buffer, \"le\", 4);\n      const dataBuf: Array<Buffer> = [lenBuf];\n      for (let d of settles) {\n        const fromBuf = fromAddressBytes(d.from); // Buffer.from(d.from, \"hex\");\n        const numBuf = new BN(d.num).toArrayLike(Buffer, \"le\", 8);\n        const indexBuf = new BN(d.index).toArrayLike(Buffer, \"le\", 4);\n        const factorBuf = new FactorSerial(d.factor).serial();\n        dataBuf.push(fromBuf, numBuf, indexBuf, factorBuf);\n      }\n      return Buffer.concat(dataBuf);\n    }\n    return Buffer.alloc(4, 0);\n  }\n}\n\nexport default SettlesSerial;\n"]}