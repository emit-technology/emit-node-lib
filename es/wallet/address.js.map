{"version":3,"file":"address.js","sourceRoot":"","sources":["../../src/wallet/address.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ADDRESS_BYTES_LEN,\n  ADDRESS_BYTES_PREFIX,\n  ED_BASE,\n  EMIT_ADDR_BS_H0,\n  EMIT_ADDR_BS_H1,\n} from \"./serial\";\nimport { blake2bHash, toScalar } from \"./sign\";\nconst bs58 = require(\"bs58\");\n\nexport function getPublicKeyBs58(privateKey: Buffer): string {\n  try{\n    const pk = privateKey.slice(0, 32);\n\n    const pb = ED_BASE.multiply(toScalar(pk));\n    const pubKey = Buffer.from(pb.toRawBytes());\n    // const pubKey = pb.toRawBytes();\n    const prefix = Buffer.from(ADDRESS_BYTES_PREFIX, \"hex\");\n    const h0 = blake2bHash(EMIT_ADDR_BS_H0, Buffer.concat([prefix, pubKey]));\n    const h0_r = Buffer.alloc(32, 0);\n    h0_r.fill(h0, 0, h0.length > 32 ? 32 : h0.length);\n\n    const h1 = blake2bHash(EMIT_ADDR_BS_H1, Buffer.concat([h0_r, pubKey]));\n    const h1_r = Buffer.alloc(32, 0);\n    h1_r.fill(h1, 0, h1.length > 32 ? 32 : h1.length);\n\n    const r = Buffer.alloc(ADDRESS_BYTES_LEN, 0);\n    const w = Buffer.concat([prefix, pubKey, h1_r.slice(0, 3)]);\n    r.fill(w, 0, w.length > ADDRESS_BYTES_LEN ? ADDRESS_BYTES_LEN : w.length);\n    return bs58.encode(r);\n  }catch (e){\n    console.error(e)\n  }\n  return \"\"\n}\n\nexport function getPublicKey(privateKey: Buffer): Buffer {\n  const sk = toScalar(privateKey.slice(0, 32));\n  const pubKey = Buffer.from(ED_BASE.multiply(sk).toRawBytes());\n  const buf = Buffer.alloc(32, 0);\n  buf.fill(pubKey, 0, pubKey.length);\n  return buf;\n}\n\nexport function fromAddressBytes(addr: string): Buffer {\n  const data: Buffer = bs58.decode(addr);\n  if (data.length != ADDRESS_BYTES_LEN) {\n    throw new Error(\"the address bytes len != 36\");\n  }\n  if (data[0] != 0x1e) {\n    throw new Error(\"the address prefix is invalid\");\n  }\n  const h0 = blake2bHash(EMIT_ADDR_BS_H0, data.slice(0, 33));\n  const h0_r = h0.slice(0, 32);\n  const h1 = blake2bHash(EMIT_ADDR_BS_H1, Buffer.concat([h0_r, data.slice(1, 33)]));\n  const h1_r = h1.slice(0, 32);\n\n  const left = Buffer.from(data.slice(33));\n  const right = h1_r.slice(0,3);\n  if (left.toString('hex') != right.toString('hex')) {\n    throw new Error(\"the address bytes sum-check failed\");\n  }\n  return data.slice(1, 33);\n}\n"]}