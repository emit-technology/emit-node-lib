{"version":3,"file":"block.js","sourceRoot":"","sources":["../../src/types/block.ts"],"names":[],"mappings":";;;AAiEO,IAAM,cAAc,GAAG;IAC1B,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAChC,OAAO,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC,CAAC;AAHW,QAAA,cAAc,kBAGzB","sourcesContent":["export interface FactorSet {\n    settles: Array<Settle>;\n    outs: Array<Out>;\n}\n\nexport interface Factor {\n    category: Category;\n    value: string;\n}\n\nexport interface Category {\n    supplier: string;\n    symbol: string;\n    id: string\n}\n\nexport interface Out {\n    target: string;\n    factor: Factor;\n    data: string;\n}\n\nexport interface DataSet {\n    name: string;\n    data: string;\n    old: string;\n}\n\nexport interface PrepareBlock {\n    address: string;\n    blk: Block;\n}\n\nexport interface BlockRef {\n    num: number;\n    hash: string;\n}\n\n\nexport interface Block {\n    num: number;\n    timestamp: number;\n    parent_hash: string;\n    data_sets: Array<DataSet>;\n    factor_set: FactorSet;\n    data?: string;\n}\n\nexport interface Settle {\n    from: string;\n    num: number;\n    index: number;\n    factor: Factor;\n}\n\nexport interface OutFactor {\n    factor: Factor;\n    timestamp: number;\n}\n\nexport interface BlockWrapped {\n    hash: string;\n    block: Block;\n}\n\nexport const getDefaultHash = (): string => {\n    const buf = Buffer.alloc(32, 0);\n    return buf.toString(\"hex\");\n};\n"]}