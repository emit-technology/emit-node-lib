{"version":3,"file":"sign.js","sourceRoot":"","sources":["../../../src/wallet/crypto/sign.ts"],"names":[],"mappings":"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","sourcesContent":["import {Signature, SignEL} from \"../types\";\nimport {blake2bHash, signPrepareBlock, toScalar} from \"../sign\";\nimport {fromAddressBytes, getPublicKeyBs58} from \"../address\";\nimport {ED_BASE} from \"../serial\";\nimport * as ed from \"@noble/ed25519\";\nimport * as ethUtil from 'ethereumjs-util';\nimport {toBuffer} from \"ethereumjs-util\";\n\n\nconst BN = require('bn.js');\n\nexport const ecsign = (m:string, privateKey: Buffer):SignEL =>{\n   const sign = signPrepareBlock(m,privateKey)\n   return {\n      r: sign.r,\n      s: sign.s,\n      v: getPublicKeyBs58(privateKey)\n   }\n}\n\nexport const ecrecover = (signEL:SignEL,h:string):string => {\n   const s = toScalar(Buffer.from(signEL.s,\"hex\"));\n   const R = ed.RistrettoPoint.fromHex(signEL.r);\n   const sig:Signature = {\n      s:s,\n      R:R\n   }\n   const pb = fromAddressBytes(signEL.v);\n   const m = toBuffer(h);\n   if(verify(m,sig,pb)){\n      return signEL.v\n   }\n   return \"Invalid sig\"\n}\n\n\nexport const verify = (m:Buffer,sig:Signature,publicKey:Buffer)=>{\n   const left = ED_BASE.multiply(sig.s);\n   const pkHex = new BN(publicKey).toString(\"hex\");\n   const concatBuf = Buffer.concat([m, Buffer.from(sig.R.toRawBytes())]);\n   let hash = blake2bHash(\"EMIT-SIGN\", concatBuf);\n   const e = toScalar(hash.slice(0, 32));\n   const right = ed.RistrettoPoint.fromHex(pkHex).multiply(e).add(sig.R)  ;//;new BN(mod(mod(toScalar() * e) + sig.R)).toArrayLike(Buffer, \"le\");\n   return  left.equals(right);\n}\n\n\nexport const personalSign = (privateKey: Buffer, msgParams:string):SignEL =>{\n   const msgBuf = ethUtil.toBuffer(msgParams);\n   const msgHash = ethUtil.hashPersonalMessage(msgBuf);\n   const str = msgHash.toString(\"hex\")\n   return ecsign(str,privateKey)\n}\n\nexport const recoverPersonalSignature = (sig:SignEL,msgHex:string): string =>{\n   return ecrecover(sig,msgHex)\n}\n"]}