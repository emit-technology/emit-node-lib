{"version":3,"file":"sign.js","sourceRoot":"","sources":["../../../src/wallet/crypto/sign.ts"],"names":[],"mappings":"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","sourcesContent":["import {SignEL} from \"../types/crypto\";\nimport { mod, signPrepareBlock, toScalar} from \"../sign\";\nimport {fromAddressBytes, getPublicKeyBs58} from \"../address\";\nimport {ED_BASE} from \"../serial\";\nimport * as ed from \"@noble/ed25519\";\n\nconst BN = require('bn.js');\n\nexport const ecsign = (m:string, privateKey: Buffer):SignEL =>{\n   const sign = signPrepareBlock(m,privateKey)\n   return {\n      r: sign.r,\n      s: sign.s,\n      v: getPublicKeyBs58(privateKey)\n   }\n}\n\nexport const ecrecover = (signEL:SignEL,h:string):string => {\n   const s = toScalar(Buffer.from(signEL.s,\"hex\"));\n   const R = toPoint(signEL.r);\n   const sig:Signature = {\n      s:s,\n      R:R\n   }\n   const pb = fromAddressBytes(signEL.v);\n\n   const m = Buffer.from(h, \"hex\");\n   if(verify(m,sig,pb)){\n      return signEL.v\n   }\n   return \"Invalid sig\"\n}\n\nexport const toPoint = (rHex:string) =>{\n   const rb = Buffer.from(rHex,\"hex\");\n   const r = toScalar(rb);\n   const R = ED_BASE.multiply(r);\n   return R\n}\n\nexport interface Signature{\n   s: bigint;\n   R: ed.RistrettoPoint;\n}\n//TODO\nexport const verify = (m:Buffer,sig:Signature,publicKey:Buffer)=>{\n   const left = ED_BASE.multiply(sig.s);\n\n   const e = toScalar(sig.R.toRawBytes());\n   const s = new BN(mod(mod(toScalar(publicKey.slice(0,32)) * e) + toScalar(sig.R.toRawBytes()))).toArrayLike(Buffer, \"le\");\n\n   const right = Buffer.alloc(32, 0);\n   right.fill(s, 0, s.length);\n\n   console.log(Buffer.from(left.toRawBytes()),right);\n\n   return Buffer.from(left.toRawBytes()).toString('hex') == right.toString('hex');\n}"]}