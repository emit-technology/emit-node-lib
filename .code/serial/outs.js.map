{"version":3,"file":"outs.js","sourceRoot":"","sources":["../../src/serial/outs.ts"],"names":[],"mappings":";;;AAEA,4DAAoC;AACpC,sCAA8C;AAC9C,IAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5B;IAEE,oBAAY,IAAgB;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,2BAAM,GAAN;QACE,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,IAAM,MAAM,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAChE,IAAM,OAAO,GAAkB,CAAC,MAAM,CAAC,CAAC;YACxC,KAAc,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;gBAAf,IAAI,CAAC,aAAA;gBACR,IAAM,SAAS,GAAG,0BAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBAC7C,IAAM,SAAS,GAAG,IAAI,gBAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;gBACtD,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;gBACnC,IAAM,QAAM,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,WAAW,CAChE,MAAM,EACN,IAAI,EACJ,CAAC,CACJ,CAAA;gBACD,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC5C,OAAO,CAAC,IAAI,CAAC,QAAM,EAAC,QAAQ,CAAC,CAAC;aAC/B;YACD,OAAO,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAC/B;QACD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,CAAC;IACH,iBAAC;AAAD,CAAC,AA3BD,IA2BC;AAED,kBAAe,UAAU,CAAC","sourcesContent":["import { Out } from \"../types\";\nimport SerialTrait from \"./serial_trait\";\nimport FactorSerial from \"./factor\";\nimport { fromAddressBytes } from \"../address\";\nconst BN = require(\"bn.js\");\nclass OutsSerial implements SerialTrait {\n  data: Array<Out>;\n  constructor(data: Array<Out>) {\n    this.data = data;\n  }\n\n  serial(): Buffer {\n    const outs = this.data;\n    if (outs.length > 0) {\n      const lenBuf = new BN(outs.length).toArrayLike(Buffer, \"le\", 4);\n      const dataBuf: Array<Buffer> = [lenBuf];\n      for (let d of outs) {\n        const targetBuf = fromAddressBytes(d.target);\n        const factorBuf = new FactorSerial(d.factor).serial();\n        dataBuf.push(targetBuf, factorBuf);\n        const lenBuf = new BN(Buffer.from(d.data, \"hex\").length).toArrayLike(\n            Buffer,\n            \"le\",\n            4\n        )\n        const oDataBuf = Buffer.from(d.data, \"hex\");\n        dataBuf.push(lenBuf,oDataBuf);\n      }\n      return Buffer.concat(dataBuf);\n    }\n    return Buffer.alloc(4, 0);\n  }\n}\n\nexport default OutsSerial;\n"]}