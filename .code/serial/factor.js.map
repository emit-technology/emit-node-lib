{"version":3,"file":"factor.js","sourceRoot":"","sources":["../../src/serial/factor.ts"],"names":[],"mappings":";;AAEA,sCAA8C;AAC9C,IAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE5B;IAEE,sBAAY,IAAY;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IACD,6BAAM,GAAN;QACE,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;QACzB,IAAM,WAAW,GAAG,IAAI,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;QACjE,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;IAChD,CAAC;IACH,mBAAC;AAAD,CAAC,AAXD,IAWC;AAED;IAEE,wBAAY,IAAc;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IACD,+BAAM,GAAN;QACE,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;QAC3B,IAAM,WAAW,GAAG,0BAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,qCAAqC;QAC9F,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACtD,IAAM,YAAY,GAAG,IAAI,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAC3E,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAC9C,IAAM,QAAQ,GAAG,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACnE,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAC,YAAY,EAAE,SAAS,EAAC,QAAQ,EAAC,KAAK,CAAC,CAAC,CAAC;IAC7E,CAAC;IACH,qBAAC;AAAD,CAAC,AAdD,IAcC;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import SerialTrait from \"./serial_trait\";\nimport { Category, Factor } from \"../types\";\nimport { fromAddressBytes } from \"../address\";\nconst BN = require(\"bn.js\");\n\nclass FactorSerial implements SerialTrait {\n  data: Factor;\n  constructor(data: Factor) {\n    this.data = data;\n  }\n  serial(): Buffer {\n    const factor = this.data;\n    const categoryBuf = new CategorySerial(factor.category).serial();\n    const valueBuf = Buffer.from(factor.value, \"hex\");\n    return Buffer.concat([categoryBuf, valueBuf]);\n  }\n}\n\nclass CategorySerial implements SerialTrait {\n  data: Category;\n  constructor(data: Category) {\n    this.data = data;\n  }\n  serial(): Buffer {\n    const category = this.data;\n    const supplierBuf = fromAddressBytes(category.supplier); //Buffer.from(category.field, \"hex\");\n    const symbolBuf = Buffer.from(category.symbol, \"hex\");\n    const symbolLenBuf = new BN(symbolBuf.length).toArrayLike(Buffer, \"le\", 4);\n    const idBuf = Buffer.from(category.id, \"hex\");\n    const idLenBuf = new BN(idBuf.length).toArrayLike(Buffer, \"le\", 4);\n    return Buffer.concat([supplierBuf,symbolLenBuf, symbolBuf,idLenBuf,idBuf]);\n  }\n}\n\nexport default FactorSerial;\n"]}