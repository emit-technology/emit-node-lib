{"version":3,"file":"sign.js","sourceRoot":"","sources":["../../src/wallet/sign.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ed from \"@noble/ed25519\";\nimport { Block, PrepareBlock, Sign } from \"./types\";\nimport { randomBytes } from \"crypto\";\nimport { ED_BASE } from \"./serial/constants\";\nimport { fromAddressBytes } from \"./address\";\nimport BlockSerial from \"./serial/block\";\n\nconst BN = require(\"bn.js\");\nconst b2b = require(\"blake2b\");\n\nexport function blake2b(personal: string, data: Buffer): Buffer {\n  const p = Buffer.alloc(16, 0);\n  p.fill(personal, 0, personal.length);\n  const hash = b2b(64, null, null, p);\n  const out = hash.update(data);\n  const buf = out.digest(\"binary\");\n  return Buffer.from(buf);\n}\n\nexport function prepareBlockToHash(prepareBlock: PrepareBlock): string {\n  const PREPARE_BLOCK_PERSONAL = \"EMIT-PREPARE-BLK\";\n  const addrBuf = fromAddressBytes(prepareBlock.address);\n  const blkHashBuf = Buffer.from(blockToHash(prepareBlock.blk), \"hex\");\n  const bufConcat = Buffer.concat([addrBuf, blkHashBuf]);\n  console.log(bufConcat, \"bufConcat buf\");\n  const buf = blake2b(PREPARE_BLOCK_PERSONAL, bufConcat);\n  console.log(buf, \"prepare buf\");\n  return buf.slice(0, 32).toString(\"hex\");\n}\n\nexport function blockToHash(block: Block) {\n  const BLOCK_HASH_PERSONAL = \"EMIT-BLOCK-HASH\";\n  const buf = blake2b(BLOCK_HASH_PERSONAL, new BlockSerial(block).serial());\n  return buf.slice(0, 32).toString(\"hex\");\n}\n\nexport function toScalar(privateBytes: Uint8Array): bigint {\n  return mod(bytesToNumberLE(privateBytes), ed.CURVE.n);\n}\n\nexport function bytesToNumberLE(uint8a: Uint8Array): bigint {\n  let value = BigInt(0);\n  for (let i = 0; i < uint8a.length; i++) {\n    value += BigInt(uint8a[i]) << (BigInt(8) * BigInt(i));\n  }\n  return value;\n}\nfunction mod(a: bigint, b: bigint = ed.CURVE.n) {\n  const res = a % b;\n  return res >= BigInt(0) ? res : b + res;\n}\n\nexport function signPrepareBlock(h: string, privateKey: Buffer): Sign {\n  const m = Buffer.from(h, \"hex\");\n  const r = toScalar(randomBytes(32));\n  const sk = toScalar(privateKey.slice(0, 32));\n  const R = ED_BASE.multiply(r);\n\n  const concatBuf = Buffer.concat([m, R.toRawBytes()]);\n  let hash = blake2b(\"EMIT-SIGN\", concatBuf);\n  const e = toScalar(hash.slice(0, 32));\n  const s = new BN(mod(mod(sk * e) + r)).toArrayLike(Buffer, \"le\");\n  const sBuf = Buffer.alloc(32, 0);\n  sBuf.fill(s, 0, s.length);\n  return {\n    r:  R.toHex(),\n    s: sBuf.toString(\"hex\"),\n  };\n}\n\nexport interface MsgWithSign<T> {\n  data: T;\n  sign: SignWithAddress;\n}\n\nexport interface SignWithAddress {\n  addr: string;\n  sign: Sign;\n}\n"]}